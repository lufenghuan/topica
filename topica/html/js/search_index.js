var search_data = {"index":{"searchIndex":["api","v1","applicationcontroller","categoriescontroller","categorieshelper","commentscontroller","commentshelper","errorscontroller","errorshelper","favorscontroller","favorshelper","feedscontroller","feedshelper","followshipscontroller","followshipshelper","postscontroller","postshelper","topicscontroller","topicshelper","usersessionscontroller","usersessionshelper","userscontroller","usershelper","applicationcontroller","applicationhelper","category","comment","favor","feed","followship","post","topic","topica","application","user","all_favorers()","all_following_topics()","all_following_users()","all_posts()","all_topics()","all_topics()","comment_params()","create()","create()","create()","create()","create()","create()","create()","create()","create()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","favoring_posts()","favoring_users()","feed_params()","following_topics()","following_users()","index()","index()","index()","index()","index()","index()","ping()","post_params()","record_not_found()","render_not_authenticated()","render_page_not_found()","routing_error()","server_error()","set_csrf_cookie_for_ng()","show()","show()","show()","show()","show()","topic_params()","update()","update()","update()","update()","update()","user_params()","verified_request?()","readme"],"longSearchIndex":["api","api::v1","api::v1::applicationcontroller","api::v1::categoriescontroller","api::v1::categorieshelper","api::v1::commentscontroller","api::v1::commentshelper","api::v1::errorscontroller","api::v1::errorshelper","api::v1::favorscontroller","api::v1::favorshelper","api::v1::feedscontroller","api::v1::feedshelper","api::v1::followshipscontroller","api::v1::followshipshelper","api::v1::postscontroller","api::v1::postshelper","api::v1::topicscontroller","api::v1::topicshelper","api::v1::usersessionscontroller","api::v1::usersessionshelper","api::v1::userscontroller","api::v1::usershelper","applicationcontroller","applicationhelper","category","comment","favor","feed","followship","post","topic","topica","topica::application","user","api::v1::favorscontroller#all_favorers()","api::v1::followshipscontroller#all_following_topics()","api::v1::followshipscontroller#all_following_users()","api::v1::categoriescontroller#all_posts()","api::v1::categoriescontroller#all_topics()","api::v1::feedscontroller#all_topics()","api::v1::commentscontroller#comment_params()","api::v1::categoriescontroller#create()","api::v1::commentscontroller#create()","api::v1::favorscontroller#create()","api::v1::feedscontroller#create()","api::v1::followshipscontroller#create()","api::v1::postscontroller#create()","api::v1::topicscontroller#create()","api::v1::usersessionscontroller#create()","api::v1::userscontroller#create()","api::v1::categoriescontroller#destroy()","api::v1::commentscontroller#destroy()","api::v1::favorscontroller#destroy()","api::v1::feedscontroller#destroy()","api::v1::followshipscontroller#destroy()","api::v1::postscontroller#destroy()","api::v1::topicscontroller#destroy()","api::v1::usersessionscontroller#destroy()","api::v1::userscontroller#destroy()","user#favoring_posts()","post#favoring_users()","api::v1::feedscontroller#feed_params()","user#following_topics()","topic#following_users()","api::v1::commentscontroller#index()","api::v1::favorscontroller#index()","api::v1::feedscontroller#index()","api::v1::postscontroller#index()","api::v1::topicscontroller#index()","api::v1::userscontroller#index()","api::v1::applicationcontroller#ping()","api::v1::postscontroller#post_params()","api::v1::applicationcontroller#record_not_found()","api::v1::applicationcontroller#render_not_authenticated()","api::v1::errorscontroller#render_page_not_found()","api::v1::errorscontroller#routing_error()","api::v1::applicationcontroller#server_error()","api::v1::applicationcontroller#set_csrf_cookie_for_ng()","api::v1::commentscontroller#show()","api::v1::feedscontroller#show()","api::v1::postscontroller#show()","api::v1::topicscontroller#show()","api::v1::userscontroller#show()","api::v1::topicscontroller#topic_params()","api::v1::commentscontroller#update()","api::v1::feedscontroller#update()","api::v1::postscontroller#update()","api::v1::topicscontroller#update()","api::v1::userscontroller#update()","api::v1::userscontroller#user_params()","api::v1::applicationcontroller#verified_request?()",""],"info":[["Api","","Api.html","",""],["Api::V1","","Api/V1.html","",""],["Api::V1::ApplicationController","","Api/V1/ApplicationController.html","","<p>The base class for all the api controllers.\n<p>Author &mdash; Yifan Ge\n\n"],["Api::V1::CategoriesController","","Api/V1/CategoriesController.html","","<p>POST     /api/v1/users/:user_id/posts/:post_id/topics/delete## The\ncontroller for all categories, which …\n"],["Api::V1::CategoriesHelper","","Api/V1/CategoriesHelper.html","",""],["Api::V1::CommentsController","","Api/V1/CommentsController.html","","<p>Comment controller\n<p>Author &mdash; Yifan Ge\n\n"],["Api::V1::CommentsHelper","","Api/V1/CommentsHelper.html","",""],["Api::V1::ErrorsController","","Api/V1/ErrorsController.html","",""],["Api::V1::ErrorsHelper","","Api/V1/ErrorsHelper.html","",""],["Api::V1::FavorsController","","Api/V1/FavorsController.html","",""],["Api::V1::FavorsHelper","","Api/V1/FavorsHelper.html","",""],["Api::V1::FeedsController","","Api/V1/FeedsController.html","","<p>Feed controller Basic GRUD implemented Feed is also defined as a nested\nresource of user, so you can …\n"],["Api::V1::FeedsHelper","","Api/V1/FeedsHelper.html","",""],["Api::V1::FollowshipsController","","Api/V1/FollowshipsController.html","",""],["Api::V1::FollowshipsHelper","","Api/V1/FollowshipsHelper.html","",""],["Api::V1::PostsController","","Api/V1/PostsController.html","","<p>Post controller Basic GRUD implemented Post is also defined as a nested\nresource of user, so you can …\n"],["Api::V1::PostsHelper","","Api/V1/PostsHelper.html","",""],["Api::V1::TopicsController","","Api/V1/TopicsController.html","","<p>Topic controller Basic GRUD implemented You have three ways to get to a\ntopic resource. 1) Directly via …\n"],["Api::V1::TopicsHelper","","Api/V1/TopicsHelper.html","",""],["Api::V1::UserSessionsController","","Api/V1/UserSessionsController.html","",""],["Api::V1::UserSessionsHelper","","Api/V1/UserSessionsHelper.html","",""],["Api::V1::UsersController","","Api/V1/UsersController.html","","<p>User controller Basic GRUD implemented\n"],["Api::V1::UsersHelper","","Api/V1/UsersHelper.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Category","","Category.html","",""],["Comment","","Comment.html","","<p>Comment model\n"],["Favor","","Favor.html","",""],["Feed","","Feed.html","",""],["Followship","","Followship.html","",""],["Post","","Post.html","",""],["Topic","","Topic.html","",""],["Topica","","Topica.html","",""],["Topica::Application","","Topica/Application.html","",""],["User","","User.html","",""],["all_favorers","Api::V1::FavorsController","Api/V1/FavorsController.html#method-i-all_favorers","()",""],["all_following_topics","Api::V1::FollowshipsController","Api/V1/FollowshipsController.html#method-i-all_following_topics","()",""],["all_following_users","Api::V1::FollowshipsController","Api/V1/FollowshipsController.html#method-i-all_following_users","()",""],["all_posts","Api::V1::CategoriesController","Api/V1/CategoriesController.html#method-i-all_posts","()","<p>return all posts for a given topic GET      /api/v1/topics/:topic_id/posts\n"],["all_topics","Api::V1::CategoriesController","Api/V1/CategoriesController.html#method-i-all_topics","()","<p>return all the topics of a given post GET\n/api/v1/users/:user_id/feeds/:feed_id/topics\n"],["all_topics","Api::V1::FeedsController","Api/V1/FeedsController.html#method-i-all_topics","()",""],["comment_params","Api::V1::CommentsController","Api/V1/CommentsController.html#method-i-comment_params","()","<p>Whitelist the required fields in params hash\n"],["create","Api::V1::CategoriesController","Api/V1/CategoriesController.html#method-i-create","()","<p>add topics for a post POST     /api/v1/users/:user_id/posts/:post_id/topics\n"],["create","Api::V1::CommentsController","Api/V1/CommentsController.html#method-i-create","()","<p>Create a new comment POST    \n/api/v1/users/:user_id/posts/:post_id/posts/:post_id/comments\n"],["create","Api::V1::FavorsController","Api/V1/FavorsController.html#method-i-create","()",""],["create","Api::V1::FeedsController","Api/V1/FeedsController.html#method-i-create","()","<p>Create a new feed Params:\n<p>feed &mdash; Hash of the feed object to be created\n\n<p>POST /feeds or POST /users/:user_id/feeds …\n"],["create","Api::V1::FollowshipsController","Api/V1/FollowshipsController.html#method-i-create","()",""],["create","Api::V1::PostsController","Api/V1/PostsController.html#method-i-create","()","<p>Create a new post Params:\n<p>post &mdash; Hash of the post object to be created\n\n<p>POST /posts or POST /users/:user_id/posts …\n"],["create","Api::V1::TopicsController","Api/V1/TopicsController.html#method-i-create","()","<p>Create a new topic Params:\n<p>topic &mdash; Hash of the topic object to be created\n\n<p>POST /topics or POST /users/:user_id/feeds/ …\n"],["create","Api::V1::UserSessionsController","Api/V1/UserSessionsController.html#method-i-create","()",""],["create","Api::V1::UsersController","Api/V1/UsersController.html#method-i-create","()","<p>Create a new user Params:\n<p>user &mdash; Hash of the user object to be created\n\n<p>POST /users\n"],["destroy","Api::V1::CategoriesController","Api/V1/CategoriesController.html#method-i-destroy","()","<p>Remove topics from a post POST    \n/api/v1/users/:user_id/posts/:post_id/topics/delete\n"],["destroy","Api::V1::CommentsController","Api/V1/CommentsController.html#method-i-destroy","()","<p>Destroy one comment by ID\n"],["destroy","Api::V1::FavorsController","Api/V1/FavorsController.html#method-i-destroy","()",""],["destroy","Api::V1::FeedsController","Api/V1/FeedsController.html#method-i-destroy","()","<p>Destroy one feed by ID DELETE /feeds/:feed_id or DELETE\n/users/:user_id/feeds/:feed_id\n"],["destroy","Api::V1::FollowshipsController","Api/V1/FollowshipsController.html#method-i-destroy","()",""],["destroy","Api::V1::PostsController","Api/V1/PostsController.html#method-i-destroy","()","<p>Destroy one post by ID DELETE /post/:post_id or DELETE\n/users/:user_id/posts/:post_id\n"],["destroy","Api::V1::TopicsController","Api/V1/TopicsController.html#method-i-destroy","()","<p>Destroy one topic by ID DELETE /topics/:topic_id or DELETE\n/users/:user_id/feeds/:feed_id/topics/:topic_id …\n"],["destroy","Api::V1::UserSessionsController","Api/V1/UserSessionsController.html#method-i-destroy","()",""],["destroy","Api::V1::UsersController","Api/V1/UsersController.html#method-i-destroy","()","<p>Destroy one user by ID DELETE /users/:user_id\n"],["favoring_posts","User","User.html#method-i-favoring_posts","()",""],["favoring_users","Post","Post.html#method-i-favoring_users","()",""],["feed_params","Api::V1::FeedsController","Api/V1/FeedsController.html#method-i-feed_params","()","<p>Whitelist the required fields in params hash\n"],["following_topics","User","User.html#method-i-following_topics","()",""],["following_users","Topic","Topic.html#method-i-following_users","()",""],["index","Api::V1::CommentsController","Api/V1/CommentsController.html#method-i-index","()","<p>Query for all the comments in descendent order GET     \n/api/v1/users/:user_id/comments GET      /api/v1/users/ …\n"],["index","Api::V1::FavorsController","Api/V1/FavorsController.html#method-i-index","()",""],["index","Api::V1::FeedsController","Api/V1/FeedsController.html#method-i-index","()","<p>Query for all the feeds in descendent order GET /feeds or GET\n/users/:user_id/feeds\n"],["index","Api::V1::PostsController","Api/V1/PostsController.html#method-i-index","()","<p>Query for all the posts in descendent order GET /posts or GET\n/users/:user_id/posts\n"],["index","Api::V1::TopicsController","Api/V1/TopicsController.html#method-i-index","()","<p>Query for all the topics in descendent order GET /topics or GET\n/users/:user_id/feeds/:feed_id/topics …\n"],["index","Api::V1::UsersController","Api/V1/UsersController.html#method-i-index","()","<p>Query for all the users in descendent order GET /users\n"],["ping","Api::V1::ApplicationController","Api/V1/ApplicationController.html#method-i-ping","()","<p>return the api version to the user\n"],["post_params","Api::V1::PostsController","Api/V1/PostsController.html#method-i-post_params","()","<p>Whitelist the required fields in params hash\n"],["record_not_found","Api::V1::ApplicationController","Api/V1/ApplicationController.html#method-i-record_not_found","()","<p>do not panic when quering for a nonexisted record\n"],["render_not_authenticated","Api::V1::ApplicationController","Api/V1/ApplicationController.html#method-i-render_not_authenticated","()",""],["render_page_not_found","Api::V1::ErrorsController","Api/V1/ErrorsController.html#method-i-render_page_not_found","(e)",""],["routing_error","Api::V1::ErrorsController","Api/V1/ErrorsController.html#method-i-routing_error","()",""],["server_error","Api::V1::ApplicationController","Api/V1/ApplicationController.html#method-i-server_error","(e)",""],["set_csrf_cookie_for_ng","Api::V1::ApplicationController","Api/V1/ApplicationController.html#method-i-set_csrf_cookie_for_ng","()","<p>set the csrf cookie for angularjs\n"],["show","Api::V1::CommentsController","Api/V1/CommentsController.html#method-i-show","()","<p>Query for one comment by id GET      /api/v1/users/:user_id/comments/:id \nGET      /api/v1/users/:user_id/posts/ …\n"],["show","Api::V1::FeedsController","Api/V1/FeedsController.html#method-i-show","()","<p>Query for one feed by id Params:\n<p>id &mdash; feed_id\n\n<p>GET /feeds/:feed_id or GET /users/:user_id/feeds/:feed_id\n"],["show","Api::V1::PostsController","Api/V1/PostsController.html#method-i-show","()","<p>Query for one post by id Params:\n<p>id &mdash; post_id\n\n<p>GET /posts/:post_id or GET /users/:user_id/posts/:post_id\n"],["show","Api::V1::TopicsController","Api/V1/TopicsController.html#method-i-show","()","<p>Query for one topic by id Params:\n<p>id &mdash; feed_id\n\n<p>GET /topics/:topic_id or GET /users/:user_id/feeds/:feed_id/topics/ …\n"],["show","Api::V1::UsersController","Api/V1/UsersController.html#method-i-show","()","<p>Query for one user by id Params:\n<p>id &mdash; user_id\n\n<p>GET /users/:user_id\n"],["topic_params","Api::V1::TopicsController","Api/V1/TopicsController.html#method-i-topic_params","()","<p>Whitelist the required fields in params hash\n"],["update","Api::V1::CommentsController","Api/V1/CommentsController.html#method-i-update","()","<p>Update an existing comment PATCH   \n/api/v1/users/:user_id/posts/:post_id/posts/:post_id/comments/:id …\n"],["update","Api::V1::FeedsController","Api/V1/FeedsController.html#method-i-update","()","<p>Update an existing feed Params:\n<p>id &mdash; Feed id\n<p>feed &mdash; Hash of the feed object to be created\n"],["update","Api::V1::PostsController","Api/V1/PostsController.html#method-i-update","()","<p>Update an existing post Params:\n<p>id &mdash; Post id\n<p>post &mdash; Hash of the post object to be created\n"],["update","Api::V1::TopicsController","Api/V1/TopicsController.html#method-i-update","()","<p>Update an existing topic Params:\n<p>id &mdash; Feed id\n<p>topic &mdash; Hash of the topic object to be created\n"],["update","Api::V1::UsersController","Api/V1/UsersController.html#method-i-update","()","<p>Update an existing user Params:\n<p>id &mdash; user id\n<p>user &mdash; Hash of the user object to be created\n"],["user_params","Api::V1::UsersController","Api/V1/UsersController.html#method-i-user_params","()","<p>Whitelist the required fields in params hash\n"],["verified_request?","Api::V1::ApplicationController","Api/V1/ApplicationController.html#method-i-verified_request-3F","()",""],["README","","README_rdoc.html","",""]]}}